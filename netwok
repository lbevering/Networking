duckduckgo.com

https://miro.com/app/board/o9J_klSqCSY=/
https://net.cybbh.io/public/networking/latest/index.html
http://networking-ctfd-1.server.vta:8000/
	  http://10.50.23.214:8000/

Protocol Data Unit (PDU) - data unit used per the layer your talking about/using
    Session-Application = Data
    Transport = Segment/Datagram
    Network = Packet
    Data Link = Frame
    Physical = Bit

Internet Standards Organizations
    IETF - RFC’s
        https://www.rfc-editor.org/rfc-index.html
    IANA - Internet Numbers
        https://www.iana.org/numbers
    IEEE - LAN/WAN electrical standards
        https://www.ieee.org/

IEEE Standard
Ethernet
  802.3(x)
Wireless
	802.11(x)
Token Ring
	802.5

MAC Address Types
    Unicast: One to one
        8th bit is off
    Multicast: One to many
        8th bit is on
    Broadcast: One to all
        All bits on

VLAN Types
    Default - VLAN 1
    Data - User traffic
    Voice - VOIP traffic
    Management - Switch and router management
    Native - Untagged switch and router traffic

Describe Classful IPv4 addressing and subnetting
    Class A (0 to 127)
    Class B (128 to 191)
    Class C (192 to 223)
    Class D (224 to 239) - Multicasting
    Class E (240 to 255) - Not used

Offset = (MTU - (IHL x 4)) ÷ 8
	MTU by default is 1500
	IHL x 4 is to find the length of words in bytes
	8 is the amount of bytes we cant account for so we divide to find our fragment offset

ICMPv4 OS Fingerprinting
	in wireshark check data then data and click on it. if last line of "readable" data is the payload message then you can roughly determine what kinda system it is
    Linux:
        Default size: 64 bytes
        Payload message:
        !\”#\$%&\‘()*+,-./01234567
    Windows:
        Default size: 40 bytes
        Payload message:
        abcdefghijklmnopqrstuvwabcdefghi

ICMPv4 Traceroute
    Can use various protocols and ports
        ICMP (windows default)
        UDP (linux default)
        TCP

ICMPv4 Traceroute (Linux)
    Default: UDP
    	traceroute 172.16.82.106
    	traceroute -U 172.16.82.106
			-U specifies udp 
    Requires root: Modified
    	sudo traceroute -I 172.16.82.106
			-I uses traceroute with ICMP
    	sudo traceroute -T 172.16.82.106
    	sudo traceroute -T 172.16.82.106 -p 443
			-T uses tcp and needs sudo due to sending modified packets
			-p specifies the port your wanting to use

IPv6 address scopes
    Global Unicast Addresses (2000::/3)
    Unique Local (fc00::/7)
    Loopback (::1/128)
    Link-Local (fe80::/10)
    Multicast (ff00::/8)

linux routing table command
	netstat -rn

Metrics
    RIP: Hop
    EIGRP: Bandwidth, Delay, Load, Reliability
    OSPF: Cost
    BGP: Policy

Classful Routing Protocol
	Sr. No. 1
		do not carry subnet mask info within the routing updates
	Sr. No. 2
		exchange routing updates at the regular time intervals
	Sr. No. 3
		use periodic updates
	Sr. No. 4
		do not use hello messages
	Sr. No. 5
		consume more network bandwidth
	Sr. No. 6 
		do not support CIDR and VLSM
	Sr. No. 7
		examples: RIP and IGRP

Classless Routing Protocol 
	Sr. No. 1
		carry subnet mask information within therouting updates
	Sr. No. 2
		exchange routing tables only when thechanges occurs in the network topology
	Sr. No. 3
		use triggered updates
	Sr. No. 4
		usehello messages to check the status of neighbor routers
	Sr. No. 5
		consume less network bandwidth
	Sr. No. 6
		support CIDR and VLSM
	Sr. No. 7 
		Examples: OSPF and IS-IS

Routing Protocol
	used between layer 3 devices to learn and advertise routes and maintain routing tables
	routing protocol routes a routed protocol for learning and maintaining routing table

Routed Protocol
	used between routers to direct user traffic. it is also called network protocols
	routed protocols are routed by routing protocols

Autonomous Systems
    Definition:
        Collection of connected Internet Protocol routing prefixes under the control of one or more network operators on behalf of a single administrative entity or domain, that presents a common and clearly defined routing policy to the Internet.

Describe Transport Layer Protocols
    Connection-oriented
        TCP - Segments
        Unicast traffic
    Connection-less
        UDP - Datagrams
        Broadcast, Multicast, or Unicast Traffic
raw_packet_start
TCP Options
    0 - End of Options
    1 - No Options (NOP)
    2 - Maximum Segment Size (MSS)
    3 - TCP Windows Scaling
    4 - Selective ACK (SACK) Permitted
    5 - SACK
    8 - TCP Timestamps

Components of SSH Architecture
    Client / Server / Session
    Keys
        User Key - Asymmetric public key used to identify the user to the server
        Host Key - Asymmetric public key used to identify the server to the user
        Session Key - Symmetric key created by the client and server to protect the session’s 

VIEW/CHANGE SSH PORT
    To view the current configured SSH port
    cat /etc/ssh/sshd_config | grep Port
    Edit file to change the SSH Port
    sudo nano /etc/ssh/sshd_config
    Restart the SSH Service
    systemctl restart ssh

SSH-KEYGEN
	ssh-keygen -t rsa -b 4096 -C "Student"
    	Create your own SSH Public/Private keys
        	-t Encryption (rsa|dsa|ecdsa|ed25519)
        	-b Bit length (1024|2048|4096)
        	-C Adds a comment
    	~/.ssh/id_rsa and ~/.ssh/id_rsa.pub

DNS query/response
    Resolves Names to IP addresses
    Queries and responses use UDP
    DNS response larger than 512 bytes use TCP
        DNS Zone Transfer
        DNS Security

DNS Records
    A - IPv4 record
    AAAA - IPv6 record
    MX - Mail Server record
    TXT - Human-readable text
    NS - Name Server record
    SOA - Start of Authority

FTP (TCP 20/21)
    RFC 959
    Port 21 open for Control
    Port 20 only open during data transfer

TFTP (UDP 69)
    Clear-Text
    Reliability provided at Application layer
    Used by routers and switches to transfer IOS and config files

SMTP (TCP 25)
    Used to send email
    No encryption
    SMTP over TLS/SSL (SMTPS)
        TCP Ports 587 and 465

POP (TCP 110)
    Receives email
    No sync with server
    No encryption
    POP3

IMAP (TCP 143)
    Receives email
    Sync with server
    No encryption
    IMAP4
DHCP (67/68)
	DHCPv4
    	DORA
        	Discover (Broadcast)
        	Offer (Unicast)
        	Request (Broadcast)
        	Acknowlege (Unicast)
	DHCPv6
    	If Managed flag is set during SLAAC:
        	Solicit (Multicast)
        	Advertise (Unicast)
        	Request or Information Request (Multicast)
        	Reply (Unicast)

NTP (UDP 123)
    Stratum 0 - authoritative time source
    Up to Stratum 15
    Vulnerable to crafted packet injection

TACACS (TCP 49) Simple/Extended

RADIUS (UDP 1645/1646 and 1812/1813)

Diameter (TCP 3868)

SNMP (UDP 161/162)
    Versions:
        SNMPv1 - RFC 1157
        SNMPv2c - RFC 1441
        SNMPv3 - RFC 3410
	7 Message Types
        Get Request
        Set Request
        Get Next
        Get Bulk
        Response
        Trap
        Inform

RTP (UDP any above 1023)

RDP (TCP 3389)
    Developed by Microsoft (Open Standard)
        No server software needed
    Other Proprietary RDP software
        Requires to have 3rd pary software installed

Kerberos (UDP 88)
    Secure network authentication protocol
    Clients obtain tickets to access services
    Mutual authentication
    Used by Active Directory

LDAP(s) (TCP 389 and 636)
    Client/server model
    Hierarchical
    Directory schema
    Unsecure and secure versions

Types of Sniffing
	Active
		create traffice in order to see it
			-ex: send an arp request to check respones
	Passive
		by default sniffing is passive
			-ex: listen to all traffic being sent to you

Popular Software Packet Capture Programs
	tcpdump
	Wireshark
	tshark
	p0f
	NetworkMiner
	NetMiner
	SolarWinds
	BetterCap
	EtterCap

Interface Naming
    Traditional:
        eth0, eth1
    Consistent:
        eno1, ens3

TCPDUMP Primitive Qualifiers
    type - the 'kind of thing' that the id name or number refers to
        host, net, port, or portrange
    dir - transfer direction to and/or from
        src or dst
    proto - restricts the match to a particular protocol(s)
        ether, arp, ip, ip6, icmp, tcp, or udp

Basic TCPDump options
    -A = print payload in ASCII
    -D = list interfaces
    -i = specify capture interface
    -e = print data-link headers
    -X or XX = print payload in HEX and ASCII

Basic TCPDump options
    -w = write to pcap
    -r = read from pcap
    -v, vv, or vvv = verbosity
    -n = no inverse lookups

Logical Operators
    Primitives may be combined using:
        Concatenation: 'and' ( && )
        Alteration: 'or' ( || )
        Negation: 'not' ( ! )

Relational Operators
    < or < =
    > or >=
    = or == or !=

------------------------------------------------
Verify TCPDUMP
    -d = Dump the compiled packet-matching code in a human readable form

command example:
	tcpdump "ether[12:2] = 0x800" -d
output example:	
	(000) ldh   [12]
	(001) jeq   0x800,  jt 2  jf 3
	(002) ret   #262144
	(003) ret   #0

	ldh  - loads half-word (16-bit) value in the accumulator from offset 12
      in the ethernet header
	jeq - check if the value is "0x800" and if this is true "jump true" to line 2,
      if it is false "jump false" to line 3
	ret #262144 - returns the default snapshot length in bytes
	ret #0 - returns nothing, it didn’t meet the criteria in the jeq statement.
-----------------------------------------------
base filter code
	sudo tcpdump -n "enter filter" -r /home/activity_resources/pcaps/BPFCheck.pcap | wc -l

Berkley Packet Filters
	tcpdump {A} [B:C] {D} {E} {F} {G}
		A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
		B = Header Byte offset
		C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
		D = optional: Bitwise mask ( & )
		E = Relational operator ( = | == | > | < | <= | >= | != | () | << | >> )
		F = Result of Expressionraw_packet_start
		G = optional: Logical Operator ( && || ) to bridge expressions
	BPF examples
		tcpdump -i eth0 'ether[12:2] = 0x0806'
		tcpdump -i eth1 'ip[9] = 0x06'
		tcpdump -i eth0 'tcp[0:2] = 53 || tcp[2:2] = 53'
		tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'

Bitwise Masking
    BPFs can read 1 (byte), 2 (half-word) or 4 (word)
    BPFs alone will only filter to the byte level
    Bit-wise masking allow filtering precision to the bit level
    Binary (0) to ignore bit
    Binary (1) to match bit
Bitwise Masking examples
	tcpdump 'ether[12:4] & 0xffff0fff = 0x81000abc'
	tcpdump 'ip[1] & 252 = 32'
	tcpdump 'ip[6] & 224 != 0'
	tcpdump 'tcp[13] & 0x11 = 0x11'
	tcpdump 'tcp[12] & 0xf0 > 0x50'

BPFs at the Data-Link layer
	Search for IPv4, ARP, VLAN Tag, and IPv6 respectively.
		ether[12:2] = 0x0800
			ipv4
		ether[12:2] = 0x0806
			arp
		ether[12:2] = 0x8100
			vlan tag
		ether[12:2] = 0x86dd
			ipv6

Field Guide for Programming
	very useful
	IE: info about sockets and python networking scripts etc...
		https://net.cybbh.io/public/networking/latest/12_programming/fg.html#_12_5_1_tcp_stream_client

Socket creation and packet manipulation activity
	Scheme of Maneuver:
		> Linux Workstations:
		→ T1: INTERNET_HOST
		-→ T2: BLUE_DMZ_Host

	Target Section:

		T1
			Hostname: INTERNET_HOST
			IP: PROVIDED FLOAT IP
			OS: Linux
			Creds: PROVIDED CREDENTIALS
			Last Known SSH Port: 22
			PSP: none
			Malware: none
			Action: Send a Datagram Socket Message to this host

		T2
			Hostname: BLUE_DMZ_Host-1
			IP: 172.16.1.15
			OS: unknown
			Creds:unknown
			Last Known SSH Port: unknown
			PSP: Unknown
			Malware: Unknown
			Action: Send a Stream Socket Message to this host

Reconnaissance Stages
    Passive External
    Active External
    Passive Internal
    Active Internal

Reconnaissance Steps
    Network Footprinting
    Network Scanning
    Network Enumeration
    Vulnerability Assessment

Useful Sites
    OSINT Framework
    Pentest-Standard
    SecuritySift

Passive Recon Activities
    Open-Source Intelligence (OSINT)
    Publicly Available Information (PAI)

IP Addresses and Sub-domains
    DNS Lookups:
        arin.net
        whois.domaintools.com
        viewdns.info
        dnsdumpster.com
        centralops.net
    URL Scan:
        sitereport.netcraft.com
        web-check.xyz
        web-check.as93.net
        urlscan.io
    IP GeoLocation lookup:
        maxmind.com
        iplocation.io
        iplocation.net
        infosniper.net
    BGP prefixes:
        bgpview.io
        hackertarget.com
        bgp.he.net
        bgp4.as

Identifying People
    Target website
    Crawler tools like Maltego or Creepy
    Search engines
    Social Media
    Job Portals
    Tracking active emails
    Family Tree

Identifying Technologies
    File extensions
    Server responses
    Job listing
    Website content
    Google Hacking
    Shodan.io
    MAC OUI Lookup

Dig vs Whois
    Whois - queries DNS registrar over TCP port 43
        Information about the owner who registered the domain
    Dig - queries DNS server over UDP port 53
        Name to IP records

Zone Transfer
    Between Primary and Secondary DNS over TCP port 53
    https://digi.ninja/projects/zonetransferme.php
		dir axfr {@soa.server} {target-site}
		dig axfr @nsztm1.digi.ninja zonetransfer.me

Netcraft
    Similar to whois but web-based
    https://sitereport.netcraft.com/

Historical Content
    Wayback Machine
    http://archive.org/web/

Vertical Scan
    Scan some (or all ports) on a single target

Horizontal Scan
    Scan a single (or set) port(s) on a range of targets.

Strobe Scan
    Scan a predefined subset of ports on a range of targets.

Block Scan
    Scan all (or a range) ports on a range of targets.

Ping
    Ping one IP:
    	ping 172.16.82.106 -c 1
    Ping a range:
    	for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done

NMAP Defaults
    Default Scan:
        User: TCP Full Connect Scan (-sT)
        Root: TCP SYN Scan (-sS)
    Default Ports scanned: 1000 most commonly used TCP or UDP ports

NMAP Options List
	https://nmap.org/book/man-briefoptions.html

NMAP Scan Types
    Broadcast Ping/Ping sweep (-sP, -PE)
    SYN scan (-sS)
    Full connect scan (-sT)
    Null scan (-sN)
    FIN scan (-sF)
    XMAS tree scan (-sX)
    UDP scan (-sU)
    Idle scan (-sI)
    Decoy scan (-D)
    ACK/Window scan (-sA)
    RPC scan (-sR)
    FTP scan (-b)
    OS fingerprinting scan (-O)	*
    Version scan (-sV)	*
    Discovery probes
    -PE - ICMP Ping
    -Pn - No Ping	*

NMAP - Time-Out
    -T0 - Paranoid - 300 Sec
    -T1 - Sneaky - 15 Sec
    -T2 - Polite - 1 Sec
    -T3 - Normal - 1 Sec
    -T4 - Aggresive - 500 ms
    -T5 - Insane - 250 ms

NMAP - Delay
    --scan-delay <time> - Minimum delay between probes
    --max-scan-delay <time> - Max delay between probes

NMAP - Rate Limit
    --min-rate <number> - Minimum packets per second
    --max-rate <number> - Max packets per second

Netcat - Scanning
	nc [Options] [Target IP] [Target Port(s)]
 	   -z : Port scanning mode i.e. zero I/O mode
 	   -v : Be verbose [use twice -vv to be more verbose]
   	   -n : do not resolve ip addresses
  	   -w1 : Set time out value to 1
  	   -u : To switch to UDP 

Netcat - Horizontal Scanning
    Range of IPs for specific ports
    TCP
		for i in {1..254}; do nc -nvzw1 172.16.82.$i 20-23 80 2>&1 & done | grep -E 'succ|open'
    UDP
		for i in {1..254}; do nc -nuvzw1 172.16.82.$i 1000-2000 2>&1 & done | grep -E 'succ|open'

Netcat - Vertical Scanning
    Range of ports on specific IP
    TCP
		nc -nzvw1 172.16.82.106 21-23 80 2>&1 | grep -E 'succ|open'
    UDP
		nc -nuzvw1 172.16.82.106 1000-2000 2>&1 | grep -E 'succ|open'

Netcat - Scan Script
	TCP
		#!/bin/bash
		echo "Enter network address (e.g. 192.168.0): "
		read net
		echo "Enter starting host range (e.g. 1): "
		read start
		echo "Enter ending host range (e.g. 254): "
		read end
		echo "Enter ports space-delimited (e.g. 21-23 80): "
		read ports
		for ((i=$start; $i<=$end; i++))
		do
    		nc -nvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open'
		done
	UDP
		#!/bin/bash
		echo "Enter network address (e.g. 192.168.0): "
		read net
		echo "Enter starting host range (e.g. 1): "
		read start
		echo "Enter ending host range (e.g. 254): "
		read end
		echo "Enter ports space-delimited (e.g. 21-23 80): "
		read ports
		for ((i=$start; $i<=$end; i++))
		do
    		nc -nuvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open'
		done

Netcat - Banner Grabbing
    Find what is running on a particular port
		nc [Target IP] [Target Port]
		nc 172.16.82.106 22
		nc -u 172.16.82.106 53
    -u : To switch to UDP

Curl and Wget
    Both can be used to interact with the HTTP, HTTPS and FTP protocols.
    Curl - Displays ASCII
		curl http://172.16.82.106
		curl ftp://172.16.82.106
    Wget - Downloads (-r recursive)
		wget -r http://172.16.82.106
		wget -r ftp://172.16.82.106

IP Configuration
	Windows: ipconfig /all
	Linux: ip address (ifconfig depreciated)
	VyOS: show interface

DNS Configuration
	Windows: ipconfig /displaydns
	Linux: cat /etc/resolv.conf

ARP Cache
	Windows: arp -a
	Linux: ip neighbor (arp -a depreciated)

Network connections
	Windows: netstat
	Linux: ss (netstat depreciated)
	Example options useful for both netstat and ss: -antp
	a = Displays all active connections and ports.
	n = No determination of protocol names. Shows 22 not SSH.
	t = Display only TCP connections.
	u = Display only UDP connections.
	p = Shows which processes are using which sockets.
	l = listening ports

Services File
	Windows: %SystemRoot%\system32\drivers\etc\services
	Linux/Unix: /etc/services

OS Information
	Windows: systeminfo
	Linux: uname -a and /etc/os-release

Running Processes
	Windows: tasklist
	Linux: ps or top
		Example options useful for ps: -elf
		e = Show all running processes
		l = Show long format view
		f = Show full format listing

Command Path
	which
	whereis

Routing Table
	Windows: route print
	Linux: ip route (netstat -r deprecated)
	VyOS: show ip route

File Search
	find / -name hint* 2> /dev/null
	find / -iname flag* 2> /dev/null

SSH Config
	Windows: C:\Windows\System32\OpenSSH\sshd_config
	Linux: /etc/ssh/sshd_config

Dev TCP Banner Grab
	part of the bash shell
		exec 3<>/dev/tcp/172.16.82.106/22; echo -e "" >&3; cat <&3

Dev TCP Scanning
	check what ports are open
		for p in {1..1023}; do(echo >/dev/tcp/172.16.82.106/$p) >/dev/null 2>&1 && echo "$p open"; done

Network Forensics - Mapping
    Diagram devices
    Line Types
    Written Information
    Coloring
    Groupings

Network Forensics - Mapping
    Device type (Router/host)
    System Host-names
    Interface names (eth0, eth1, etc)
    IP address and CIDRs for all interfaces
    TCP and UDP ports
    Known credentials

Network Mapping Tools
    Draw.io Local (Template)
    Draw.io Web
    Witeboard.com
    Draw.Chat
    SmartDraw
    Ziteboard
    Tutorialspoint Whiteboard
    Explain Everything Whiteboard



 Red Network Recon
Entry Float IP: 10.50.26.58
    Your Network Number is 5
    Credentials: net5_studentX:passwordX
    X is your student number
Donovian Mapping & Reconnaissance (DMR)
XX OCT 2023
Start Time: 1300
Duration: 4 hours

Type of Operation: Scanning & Reconnaissance
Objective: In an effort to aid Gorgas Cyber forces, you have been tasked to assist with an overall collection and analysis of data from Donovian Cyberspace and their networks. You are tasked to perform various types of reconnaissance to accomplish this. The Gorgan Active Recon cell gained access to a boundary router and gathered the following intelligence belonging to deployed Donovian forces but have not been able to put together any mapping of their overall infrastructure. Aid the efforts by building a map of the entire network including networking devices and the target host machines below with:
Gathered Intelligence: Credentials
netX_studentX:password
vyos:password

The regional COCOM has provided direction to build a network map providing the following details, in order to drive future cyberspace operations:
    Device type
    Hostname
    Interface type
    Interface IP
    Subnet Mask CIDR
    Autonomous system number, Routing Protocol, IP network and Network Name groupings
    Open ports
    Operating system type and versions
Tools/Techniques: dig, nmap, nc, /dev/tcp
Prior Approvals: You will use SSH to progress through the network but all scanning should be conducted from your RED-INTERNET-HOST
Scheme of Maneuver:
>INTERNET_HOST
-> Red Boundry Router: DONOVIAN CYBERSPACE

Target Section:

T1
Hostname: networking-ctfd-1.server.vta
Record Type: TXT
IP: 10.50.23.214
Ports: 53
Action: interrogate DNS records

Red Boundry Router
Hostname: RED-SCR
IP: 172.16.120.1
Ports: 22
Username: vyos
Password: password
Action: Use as start point and Perform Passive/Active Reconnaissance
eth0 (INTERNET) connected to "" via 172.16.120.1/29
eth1 (REDNET) connected to RED-IPS via 172.16.120.10/29
eth2 (DMZ) connected to DMZ via 172.16.101.30/27


Hostname: red-dmz-host-1
IP: 172.16.101.2/27
Ports: 22
Username: net5_student9
password: password9
eth0 connected to RBR via 172.16.101.31/27

Hostname: RED-IPS
IP: 172.16.120.9/29
Ports: 22
Username: vyos
Password: password
eth0 connected to RBR via 172.16.120.9/29 desc.(INTERNET)
eth1 connected to RED-POP via 172.16.120.18/29

Hostname: RED-POP
IP: 172.16.120.17
Ports: 22
Username: vyos
password: password
eth0 (INTERNET) connected to RED-IPS via 172.16.120.17/29
eth1 (REDHOSTS) connected to "" via 172.16.182.126/27
eth2 (REDINTDMZ) connected to "" via 172.16.140.6/29		

Hostname: RED-POP2
IP: 172.16.140.5
username: vyos
password: password
eth0 (REDINTDMZ) connected to RED-POP via 172.16.140.5/29
eth1 (REDINTDMZ2) connected to red-int-dmz2-host-2 via 172.16.140.62/27 

T2
Hostname: UNKNOWN
IP: 172.16.182.110
Action: Perform Active Reconnaissance
Ports: 22, 80, 1980, 1982, UDP 1984, 1988, TCP/UDP 1989

T3
Hostname: UNKNOWN
IP: 172.16.140.33
Ports: 22, 80, 2800
Action: Perform Active Reconnaissance
eog 172.16.140.33/hint-01.png

T4
Hostname: red-host-1
IP: 172.16.182.106/27
Ports: 22
Action: Perform Active Reconnaissance
eth0 connected to RED-POP via 172.16.182.127

T5
Hostname: red-host-3
IP: 172.16.182.114/27
Action: Perform Active Reconnaissance
Ports: 22
eth0 172.16.182.127

T6
Hostname: red-host-4
IP: 172.16.182.118/27
Action: Perform Active Reconnaissance
Ports: 22
eth0 172.16.182.127

T7
Hostname: red-int-dmz2-host-2
IP: 172.16.140.35/27
Ports: 22
Action: Perform Active Reconnaissance
eth0 connected to RED-POP2 via 172.16.140.63



SSH Key Change Fix
	ssh-keygen -f "/home/student/.ssh/known_hosts" -R "172.16.82.106"
	    Copy/Paste the ssh-geygen message to remove the Host key from the known_hosts file

SSH Options
    -L - Creates a port on the client mapped to a ip:port via the server
    -D - Creates a port on the client and sets up a SOCKS4 proxy tunnel where the target ip:port is specified dynamically
    -R - Creates the port on the server mapped to a ip:port via the client
    -NT - Do not execute a remote command and disable pseudo-tty (will hang window)

Local Port Forwarding	
	ssh -p <optional alt port> <user>@<server ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
	or
	ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<server ip> -NT

ssh <user>@<IP> -L <bind port>:<target IP>:<target port>
	ex: ssh user@BH1 -L 50900:127.0.0.1:80 -NT

if you have an ip but do not know the ports open use nmap first in order to know if you can get onto the system and to see what ports are open
	then nc port 22 to make sure you can ssh
		if you find out you can then move on

---------------------------------------------
PORTS OPEN TO ME
	50100-50199
---------------------------------------------

once on a system check
	ip a
	ip n
	ip r
	uname -a
	cat /etc/passwd
	netstat or ss -ntlp

Dynamic Port Forwarding
	ssh <user>@<server ip> -p <alt port> -D <port> -NT
	or
	ssh -D <port> -p <alt port> <user>@<server ip> -NT
	ex: ssh user@BH1ext -D 9050 -NT
		proxy chain by deafult uses port 9050

proxychains nmap -T4 -vvvv -p 21-23,80 192.168.1.10 -Pn
proxychains wget -r ftp://127.0.0.1
	should work if anonymous server is allowed	
	if not then youll need credentials
	proxychains ftp 127.0.0.1

static tunnel to get through BH1 to the .10
	ssh student@172.16.82.106 -L 50101:192.168.1.10:22 -NT

ping sweep
	for i in {1..254} ;do (ping -c 1 192.168.1.$i | grep "bytes from" &) ;done 

bluepriv> ssh usr@BH1int -R 50199:127.0.0.1:80 -NT
IH> ssh usr@BH1 -L 50102:127.0.0.1:50199 -NT
IH> nc 127.0.0.1 50102

IH> ssh user@127.0.0.1 -p50101 -D 9050 -NT
IH> proxychains wget -r ftp://127.0.0.1 
	or proxychains ftp 127.0.0.1

<user>@<IP> -L <bind port>:<tgt IP>:<tgt port> -NT
<user>@<IP> -R <bind port>:<tgt IP>:<tgt port> -NT
<user>@<IP> -D 9050 -NT





Common iptable options
	-t - Specifies the table. (Default is filter)
	-A - Appends a rule to the end of the list or below specified rule
	-I - Inserts the rule at the top of the list or above specified rule
	-R - Replaces a rule at the specified rule number
	-D - Deletes a rule at the specified rule number
	-F - Flushes the rules in the selected chain
	-L - Lists the rules in the selected chain using standard formatting
	-S - Lists the rules in the selected chain without standard formatting
	-P - Sets the default policy for the selected chain
	-n - Disables inverse lookups when listing rules
	--line-numbers - Prints the rule number when listing rules
	-p - Specifies the protocol
	-i - Specifies the input interface
	-o - Specifies the output interface
	--sport - Specifies the source port
	--dport - Specifies the destination port
	-s - Specifies the source IP
	-d - Specifies the destination IP
	-j - Specifies the jump target action
		ACCEPT - Allow the packet
    		REJECT - Deny the packet (send an ICMP reponse)
		DROP - Deny the packet (send no response)
		-j [ ACCEPT | REJECT | DROP ]

iptables syntax
	iptables -t [table] -A [chain] [rules] -j [action]
    Table: filter*, nat, mangle
    Chain: INPUT, OUTPUT, PREROUTING, POSTROUTING, FORWARD

iptables rules syntax
	-i [ iface ]
	-o [ iface ]
	-s [ ip.add | network/CIDR ]
	-d [ ip.add | network/CIDR ]
	-p icmp [ --icmp-type type# { /code# } ]
	-p tcp [ --sport | --dport { port1 |  port1:port2 } ]
	-p tcp [ --tcp-flags SYN,ACK,PSH,RST,FIN,URG,ALL,NONE ]
	-p udp [ --sport | --dport { port1 | port1:port2 } ]
	-m to enable iptables extensions:
		-m state --state NEW,ESTABLISHED,RELATED,UNTRACKED,INVALID
		-m mac [ --mac-source | --mac-destination ] [mac]
		-p [tcp|udp] -m multiport [ --dports | --sports | --ports { port1 | port1:port15 } ]
		-m bpf --bytecode [ 'bytecode' ]
		-m iprange [ --src-range | --dst-range { ip1-ip2 } ]

Modify iptables
    	Flush table
    		iptables -t [table] -F
    	Change default policy
    		iptables -t [table] -P [chain] [action]
	Lists rules with rule numbers
    		iptables -t [table] -L --line-numbers
   	Lists rules as commands interpreted by the system
    		iptables -t [table] -S
	Inserts rule before Rule number
    		iptables -t [table] -I [chain] [rule num] [rules] -j [action]
    	Replaces rule at number
    		iptables -t [table] -R [chain] [rule num] [rules] -j [action]
    	Deletes rule at number
    		iptables -t [table] -D [chain] [rule num]


1. Create the Table
nft add table [family] [table]
    [family] = ip*, ip6, inet, arp, bridge and netdev.
    [table] = user provided name for the table.

2. Create the Base Chain
nft add chain [family] [table] [chain] { type [type] hook [hook] priority [priority] \; policy [policy] \;}
	* [chain] = User defined name for the chain.
	* [type] =  can be filter, route or nat.
	* [hook] = prerouting, ingress, input, forward, output or postrouting.
	* [priority] = user provided integer. Lower number = higher priority. default = 0. Use "--" before negative numbers.
	* ; [policy] ; = set policy for the chain. Can be accept (default) or drop.
	 Use "\" to escape the ";" in bash

3. Create a rule in the Chain
nft add rule [family] [table] [chain] [matches (matches)] [statement]
	* [matches] = typically protocol headers(i.e. ip, ip6, tcp, udp, icmp, ether, etc)
	* (matches) = these are specific to the [matches] field.
	* [statement] = action performed when packet is matched. Some examples are: log, accept, drop, reject, counter, nat (dnat, snat, masquerade)

Rule Match options
	ip [ saddr | daddr { ip | ip1-ip2 | ip/CIDR | ip1, ip2, ip3 } ]
	tcp flags { syn, ack, psh, rst, fin }
	tcp [ sport | dport { port1 | port1-port2 | port1, port2, port3 } ]
	udp [ sport| dport { port1 | port1-port2 | port1, port2, port3 } ]
	icmp [ type | code { type# | code# } ]
	ct state { new, established, related, invalid, untracked }
	iif [iface]
	oif [iface]

Modify NFTables
	nft { list | flush } ruleset
	nft { delete | list | flush } table [family] [table]
	nft { delete | list | flush } chain [family] [table] [chain]

	List table with handle numbers
    		nft list table [family] [table] [-a]
    	Adds after position
    		nft add rule [family] [table] [chain] [position <position>] [matches] [statement]
    	Inserts before position
    		nft insert rule [family] [table] [chain] [position <position>] [matches] [statement]
    	Replaces rule at handle
    		nft replace rule [family] [table] [chain] [handle <handle>] [matches] [statement]
    	Deletes rule at handle
    		nft delete rule [family] [table] [chain] [handle <handle>]
	To change the current policy
    		nft add chain [family] [table] [chain] { \; policy [policy] \;}

Source NAT
	iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.1 -j SNAT --to 1.1.1.1
		-changes source NAT to 1.1.1.1 after NATing 
	iptables -t nat -A POSTROUTING -p tcp -o eth0 -s 192.168.0.1 -j SNAT --to 1.1.1.1:9001
		-changes source NAT and port to 1.1.1.1:9001 after NATing
	iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
		-masquerade is SNAT but automated for every IP address

Destination NAT
	iptables -t nat -A PREROUTING -i eth0 -d 8.8.8.8 -j DNAT --to 10.0.0.1
		-anything going to destination 8.8.8.8 is DNATed to 10.0.0.1 after NAT
		-examples:
			iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 22 -j DNAT --to 10.0.0.1:22
			iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to 10.0.0.2:80
			iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j DNAT --to 10.0.0.3:443
			iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080

Creating nat tables and chains
    	Create the NAT table
    		nft add table ip NAT
    	Create the NAT chains
    		nft add chain ip NAT PREROUTING { type nat hook prerouting priority 0 \; }
    		nft add chain ip NAT POSTROUTING { type nat hook postrouting priority 0 \; }
Source NAT
	nft add rule ip NAT POSTROUTING ip saddr 10.10.0.40 oif eth0 snat 144.15.60.11
	nft add rule ip NAT POSTROUTING oif eth0 masquerade
Destination NAT
	nft add rule ip NAT PREROUTING iif eth0 ip daddr 144.15.60.11 dnat 10.10.0.40
	nft add rule ip NAT PREROUTING iif eth0 tcp dport { 80, 443 } dnat 10.1.0.3
	nft add rule ip NAT PREROUTING iif eth0 tcp dport 80 redirect to 8080

Mangle examples with iptables
	iptables -t mangle -A POSTROUTING -o eth0 -j TTL --ttl-set 128
		-changing ttl field to 128 coming out of eth0 
	iptables -t mangle -A POSTROUTING -o eth0 -j DSCP --set-dscp 26
		-changing dscp value to 26 coming out of eth0
Mangle examples with nftables
	nft add table ip MANGLE
	nft add chain ip MANGLE INPUT {type filter hook input priority 0 \; policy accept \;}
	nft add chain ip MANGLE OUTPUT {type filter hook output priority 0 \; policy accept \;}
	nft add rule ip MANGLE OUTPUT oif eth0 ip ttl set 128
	nft add rule ip MANGLE OUTPUT oif eth0 ip dscp set 26









































